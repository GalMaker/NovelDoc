START : <BOF> StoryStart list(Sec) StoryEnd { Novel($2) } ;

Start : 'start' { $0 } ;
Story : 'story' { $0 } ;
End   : 'end'   { $0 } ;
Say   : 'say'   { $0 } ;
Set   : 'set'   { $0 } ;

ChoiceToken : 'choice'   { $0 };

StoryStart : Story Start | <game_start_chinese> { $0 };
StoryEnd   : Story End   | <game_end_chinese>   { $0 };

Num : <int>   { Lit(@0, int(*$0)) } 
    | <float> { Lit(@0, float(*$0)) }
    ; 

Str : <str> { Lit(@0, *$0) } ;

ID  : <identifier> { *$0 } ;

List  : '[' ']'                                        { List(@0, []) }
      | '[' separated_list(',', Expression) ']'        { List(@0, $1) }
      ;


Expression :  Expression '('  ')'                                 { Call(@1, $0, []) }
           |  Expression '(' separated_list(',', Expression) ')'  { Call(@1, $0, $2) }
           |  Atom { $0 }
           ;

Atom :  Str             { $0 }
      | Num             { $0 }
      | <identifier>    { Var(@0, *$0) }
      | List               { $0 }
      | '(' Expression ')' { $1 }
      ;

LabelStart : Start Story ID  { Label(@0, $2, False) }
           ;

LabelEnd   : End ID             { Label(@0, $1, True) }
           ;

Comment    : <comment> { *$0 }
           ;

Status     : '[' ID ']' '(' ID ')' { Status(@0, $1, $4) }
           | '[' ID ']'            { Status(@0, $1, None) }
           ;

SayWhat    : Say <saystr>               { SayWhat(@0, None, *$1, None) }
           | ID Say <saystr>            { SayWhat(@1, $0, *$2, None)   }
           | ID Status Say <saystr>     { SayWhat(@2, $0, *$3, $1)     }
           ;

Command    : '>' ID list(Expression)        { Command(@0, $1, $2) }
           | '>' ID                    { Command(@0, $1, []) }
           ;

ChoiceItem : <saystr> '->' ID { ChoiceItem(@1, *$0, $2) } ;

Choice     : ChoiceToken ':' list(ChoiceItem) { Choice(@1, $2) } ;


Novel      : LabelStart LabelEnd           { Doc($0, None) }
           | LabelStart list(Sec) LabelEnd { Doc($0, $1)   }
           ;

Let        : Set ID '=' Expression   { Let(@0, $1, $3) }
           ;

Camera     : '+' List   { Camera(@0, *$0, $1) }
           | '-' List   { Camera(@0, *$0, $1) }
           ;

Action     : '[' ID ']' '->' ID { Action(@0, $1, $4) }
           | '['    ']' '->' ID { Action(@0, None, $3) }
           ;

Chapter    : '=====' list(ID) '=====' { Chapter(@0, $1) }
           ;

Sec    : Let           { $0 }
       | Camera        { $0 }
       | SayWhat       { $0 }
       | Command       { $0 }
       | Choice        { $0 }
       | Novel         { $0 }
       | Comment       { $0 }
       | Action        { $0 }
       | Chapter       { $0 }
       ;
